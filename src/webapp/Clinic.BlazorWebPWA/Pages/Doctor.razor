@page "/doctor"
@using Clinic.BlazorWebPWA.Extensions
@using Clinic.BlazorWebPWA.Services.IService
@using Clinic.DTO.Models.Dto
@using Newtonsoft.Json
@inject HttpClient Http
@inject IClinicService clinicService
@inject NavigationManager nav
@inject DialogService DialogService
<PageTitle>Doctor</PageTitle>
<head>
    <link href="css/doctor.css" rel="stylesheet" />
</head>

<body style="background: none !important">
    <main class="flex-shrink-0">
        <div class="bg-primary">
            <header class="bg-primary py-4 inner-header">
                <div class="container py-3 px-5">
                    <div class="row gx-5 align-items-center justify-content-center">
                        <div class="col-lg-12">
                            <div class="text-center">
                                <h1 class="fw-bold text-white text-uppercase">Our professional doctors</h1>
                            </div>
                        </div>
                    </div>
                </div>
            </header>
        </div>

        <!-- Filter bar-->
        <section class="py-3">
            <div class="container px-5">
                <div class="row gx-3 align-items-center">
                    <!-- Part 1: Filter Bar -->
                    <div class="col-lg-9">
                        <div class="row">
                            <div class="col-md-1 d-flex justify-content-center">
                                <h6 class="my-auto">Filter:</h6>
                            </div>
                            <div class="col-md-5">
                                <RadzenDropDown TValue="int" ValueProperty="Key" TextProperty="Value" Value=@value Data=@doctorFilter Change="@(args => FilterSpec(args))" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent" />
                            </div>
                            <div class="col-md-3">
                                  <RadzenDropDown @bind-Value=@titleValue Data=@Title Change="@(args => FilterTitle(args))" Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
                            </div>
                        </div>
                    </div>

                    <!-- Part 2: Search Bar -->
                    <div class="col-lg-3">
                        <div class="input-group">
                            <input type="text"  value="@doctorName" @onchange="HandleChange" class="form-control" placeholder="Search for a doctor" aria-label="Doctor's name" >
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Page Content-->
        <section class="py-3">
            <div class="container px-5 mt-3">
                <div class="row gx-5">
                    @if (doctors == null)
                    {
                        <h2>Loading</h2>
                    }
                    else
                    {
                        @foreach (var doctor in doctors)
                    {
                        <div class="col-md-6 col-lg-4">
                            <div class="card mb-5">
                                <div class="bg-white shadow-lg border">
                                    <div class="mx-auto"><img class="img-fluid card-img-top" src="@doctor.ImageUrl" alt="doctor-image"></div>
                                    <div class="card-body align-items-center" style="height: 18em">
                                        <div class="text-center mb-2">
                                            <h5 class="fw-bold card-title">@doctor.Title @doctor.Name </h5>
                                            <p class="card-subtitle mb-0 text-muted">@doctor.Specialization.ConvertSpecEnum()</p>
                                        </div>
                                        <div class="card-text px-3">
                                            <p class="text-muted fw-light mb-2" style="overflow: hidden; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 3;">@doctor.Introduction</p>
                                        </div>
                                        <div class="d-flex px-3 justify-content-between">
                                            <p class="fw-bold my-auto fs-6"> Rating: </p>
                                            <div class="stars gap-sm-2 fs-5">
                                                @for (int i = 0; i < doctor.AverageRating; i++)
                                                {
                                                    <i class="fa-solid fa-star" style="color: rgb(255, 210, 48);"></i>
                                                }
                                            </div>
                                            <p class="fw-bold my-auto fs-6">@doctor.AverageRating </p>
                                        </div>
                                        <div class="d-flex justify-content-between card-body">
                                            <div><a href="#" class="text-primary fs-4 card-link"><i class="fa-brands fa-rocketchat"></i></a></div>
                                                <RadzenButton Text="Detail" ButtonStyle="ButtonStyle.Info"
                                                              Click=@(args => ShowDetail(doctor.Id)) />
                                                <RadzenButton Text="Booking Appointment" ButtonStyle="ButtonStyle.Info"
                                                              Click=@(_ => nav.NavigateTo($"doctor/book-appointments/{doctor.Id}", true)) />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    }
                    
                </div>
            </div>
        </section>
        @*<section class="p-3 d-flex justify-content-center">
            <nav aria-label="Page navigation example">
                <ul class="pagination mb-0">
                    <li class="page-item">
                        <a class="page-link" href="#" aria-label="Previous">
                            <span aria-hidden="true">«</span>
                        </a>
                    </li>
                    <li class="page-item"><a class="page-link" href="#">1</a></li>
                    <li class="page-item"><a class="page-link" href="#">2</a></li>
                    <li class="page-item"><a class="page-link" href="#">3</a></li>
                    <li class="page-item">
                        <a class="page-link" href="#" aria-label="Next">
                            <span aria-hidden="true">»</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </section>*@
    </main>
</body>


<script>
    document.querySelectorAll(".stars").forEach((starsContainer) => {
        const stars = starsContainer.querySelectorAll(".fa-solid .fa-star");

        stars.forEach((star, index1) => {
            star.addEventListener("click", () => {
                stars.forEach((otherStar, index2) => {
                    index1 >= index2
                        ? otherStar.classList.add("active")
                        : otherStar.classList.remove("active");
                });

                // Update the rating display based on the clicked star
                const ratingDisplay = starsContainer.nextElementSibling.querySelector(".fw-bold.my-auto.fs-6");
                ratingDisplay.textContent = `${index1 + 1}/5`;
            });
        });
    });


</script>
@code
{
    List<DoctorListViewModel> doctors = new();
    Dictionary<int, string> doctorFilter = Enum.GetValues(typeof(Specialization)).Cast<Specialization>().ToDictionary(x => (int)x, x => x.ToString());
    int value;
    FilterDto filter = new();
    List<string> Title = new();
    string titleValue = String.Empty;
    string doctorName = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        var response = await clinicService.GetDoctorsAsync<ResponseDto>(filter);
        if (response != null && response.IsSuccess)
        {
            doctors = JsonConvert.DeserializeObject<List<DoctorListViewModel>>(Convert.ToString((response.Result)));
            var listSpecialization = doctors.Select(x => x.Specialization).Distinct().Order().ToList();
            Title = doctors.Select(x => x.Title).Distinct().ToList();
            Title.Insert(0, "None");
        }
    }
    async Task FilterSpec(object value)
    {
        filter.Specialization = (int)value;
        doctors = null;
        StateHasChanged();
        var response = await clinicService.GetDoctorsAsync<ResponseDto>(filter);
        if (response != null && response.IsSuccess)
        {
            doctors = JsonConvert.DeserializeObject<List<DoctorListViewModel>>(Convert.ToString((response.Result)));
            StateHasChanged();
        }
    }
    async Task FilterTitle(object value)
    {
        filter.Title = ((string)value).Equals("None") ? string.Empty : (string)value;
        doctors = null;
        StateHasChanged();
        var response = await clinicService.GetDoctorsAsync<ResponseDto>(filter);
        if (response != null && response.IsSuccess)
        {
            doctors = JsonConvert.DeserializeObject<List<DoctorListViewModel>>(Convert.ToString((response.Result)));
            StateHasChanged();
        }
    }
    private async Task SearchName()
    {
        filter.DoctorName = doctorName;
        doctors = null;
        StateHasChanged();
        var response = await clinicService.GetDoctorsAsync<ResponseDto>(filter);
        if (response != null && response.IsSuccess)
        {
            doctors = JsonConvert.DeserializeObject<List<DoctorListViewModel>>(Convert.ToString((response.Result)));
            StateHasChanged();
        }
    }
    private async Task HandleChange(ChangeEventArgs e)
    {
        doctorName = e?.Value?.ToString();
        filter.DoctorName = doctorName;
        doctors = null;
        StateHasChanged();
        var response = await clinicService.GetDoctorsAsync<ResponseDto>(filter);
        if (response != null && response.IsSuccess)
        {
            doctors = JsonConvert.DeserializeObject<List<DoctorListViewModel>>(Convert.ToString((response.Result)));
            StateHasChanged();
        }
    }
    async Task ShowDetail(string id)
    {
        var doctor = doctors.FirstOrDefault(x => x.Id == id);
        await DialogService.OpenAsync("Detail", ds =>
        @<div>
        Infor Detail:
        <div>Introdcution: @doctor.Introduction</div>
        <div>Clinicnum: @doctor.ClinicNum</div>
        <div>Email: @doctor.Email</div>
        <div>Date Of Birth: @doctor.DateOfBirth.GetDateTime()</div>
    </div>, new DialogOptions()
          {
              CssClass = "custom-dialog-class",
              WrapperCssClass = "custom-dialog-wrapper-class"
          });
    }
}
