@page "/upsert-product"
@page "/upsert-product/{id}"
@layout AdminLayout
@using Clinic.Data.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IProductService productService
@inject NavigationManager nav
<PageTitle>Add Service</PageTitle>

<link href="css/admin.css" rel="stylesheet" />

<div class="page-wrapper">
    <div class="content">

        <div class="page-header">
            <div class="row">
                <div class="col-sm-12">
                    <ul class="breadcrumb">
                        <li class="breadcrumb-item"><a href="list-product">Services</a></li>
                        <li class="breadcrumb-item"><i class="fa-solid fa-chevron-right"></i></li>
                        <li class="breadcrumb-item active">Edit Service</li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-body">
                            <div class="row">
                                <div class="col-12">
                                    <div class="form-heading">
                                        <h4>Service detail</h4>
                                    </div>
                                </div>
                            <EditForm Model="createProduct" OnValidSubmit="HandleBookingCreate">
                                <div class="col-12">
                                    <div class="input-block local-forms">
                                        <label>Service's Name<span class="login-danger">*</span></label>
                                        <InputText @bind-Value="createProduct.Name" class="form-control" type="text"/>
                                    </div>
                                </div>

                                <div class="col-12 col-md-6">
                                    <div class="input-block local-forms">
                                        <label>Creator<span class="login-danger">*</span></label>
                                        <InputText @bind-Value="createProduct.Authors" class="form-control" type="text"/>
                                    </div>
                                </div>

                                <div class="col-6 col-md-6">
                                    <div class="input-block local-forms">
                                        <label>Specialization<span class="login-danger">*</span></label>
                                        <RadzenDropDown TValue="int" ValueProperty="Key" TextProperty="Value" Value=@value Change="@(args => SpecSelect(args))" Data=@Specializations Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent" />
                                    </div>
                                </div>
                                <div class="col-6 col-md-6">
                                    <div class="input-block local-forms">
                                    <RadzenCheckBox @bind-Value=@createProduct.IsMainCombo Name="CheckBox1" />
                                    <RadzenLabel Text="IsMainCombo" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                                     </div>
                                </div>
                                <div class="col-12 col-md-6">
                                    <div class="input-block local-forms">
                                        <label>Service In Combo<span class="login-danger">*</span></label>
                                        <RadzenDropDownDataGrid class="form-select" 
                                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                AllowFiltering="true" AllowClear="true"
                                                                Data="@GetListProducts" @bind-Value="multipleValues" Multiple="true"
                                                                Disabled="@(createProduct.IsMainCombo == false)"
                                                                TextProperty="Name" ValueProperty="Id" Style=" width: 100%"
                                                                Placeholder="Select Service" MaxSelectedLabels="4"
                                                                SelectAllText="Select all items" SelectedItemsText="are now selected"
                                                                Change="@(args => Change(args,"DropDown"))">
                                        </RadzenDropDownDataGrid>
                                    </div>
                                </div>

                                <div class="col-12 col-sm-12">
                                    <div class="input-block local-forms">
                                        <label>Description<span class="login-danger">*</span></label>
                                        <textarea @bind="@createProduct.Description" class="form-control" rows="3" cols="30"></textarea>
                                    </div>
                                </div>
                                <div class="col-12 col-sm-12">
                                    <div class="input-block local-forms">
                                        <label>Price<span class="login-danger">*</span></label>
                                        <input @bind="@createProduct.Price" class="form-control" type="number" required>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="doctor-submit text-end">
                                        <button type="submit" class="btn btn-primary submit-form me-2">Submit</button>
                                        <button type="submit" class="btn btn-primary cancel-form">Cancel</button>
                                    </div>
                                </div>
                            </EditForm>
                            </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code{
    int value;
    private Dictionary<int,string> Specializations = Enum.GetValues(typeof(Specialization)).Cast<Specialization>().ToDictionary(x => (int)x, x => x.ToString());
    private Product createProduct = new();
    private List<Product> GetListProducts = new();
    IEnumerable<string> multipleValues;
    [Inject]
    IAccessTokenProvider TokenProvider { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string accessToken { get; set; }
    string eventValue;
    public double Total { get; set; }
    [Parameter]
    public string? id { get; set; }
    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo("authentication/login");
        }
        var accessTokenResult = await TokenProvider.RequestAccessToken();
        accessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        var response = await productService.GetListProducts<ResponseDto>("e.IsMainCombo == false");
        if (response != null && response.IsSuccess)
        {
            GetListProducts = JsonConvert.DeserializeObject<List<Product>>(Convert.ToString((response.Result)));
        }
        if (!string.IsNullOrEmpty(id))
        {

        }
    }
    void SpecSelect(object value)
    {
        createProduct.Specialization = (int)value;
        StateHasChanged();
    }
    void Change(object value, string name)
    {
        eventValue = value is IEnumerable<object> ? string.Join(",", (IEnumerable<object>)value) : (string)value;
        createProduct.Price = GetListProducts.Where(x => eventValue.Contains(x.Id)).ToList().Sum(x => x.Price);      
        createProduct.Products = GetListProducts.Where(x => eventValue.Contains(x.Id)).ToList();
        StateHasChanged();
    }
    private async Task HandleBookingCreate()
    {
        createProduct.Id = Guid.NewGuid().ToString();
        var response = await productService.CreateOrUpdateBooking<ResponseDto>(createProduct,accessToken);
        if (response != null && response.IsSuccess)
        {
            nav.NavigateTo("/list-product");
        }
    }
}