@page "/doctor/doctor-detail/book-appointments"
@page "/doctor/book-appointments/{id}"
@using Clinic.DTO.Models.Dto
@using Clinic.BlazorWebPWA.Extensions
@using Clinic.BlazorWebPWA.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IClinicService clinicService
@inject NavigationManager nav
@inject DialogService DialogService
@inject ICouponService couponService
<PageTitle>Booking Appointment</PageTitle>

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
</head>

<body>
    <main>
        <div class="bg-white">
            <div class="container px-5 py-5 appointments">
                <div>
                    <h2 class="m-auto fw-bold text-center text-black mb-2 mx-auto p-2">BOOK APPOINTMENT</h2>

                    <EditForm Model="createBooking" OnValidSubmit="HandleBookingCreate">
                        <div class="m-auto bg-primary shadow-sm p-5 rounded-3 col-lg-8 mx-auto">
                            <div class="row">
                                <div class="mb-3 col-6">
                                    <label for="major" class="form-label medium text-white">Specialization</label>
                                    <input type="text" class="form-control" placeholder="@booking.Specialization.ConvertSpecEnum()" readonly="False">
                                </div>
                                <div class="mb-3 col-6">
                                    <label for="doctor" class="form-label medium text-white">Doctor</label>
                                    <input type="text" class="form-control" placeholder="@booking.Name" readonly="False">
                                </div>
                            </div>
                            <div class="row">
                                <div class="mb-3 col-6">
                                    <label for="date" class="form-label medium text-white">Choose appointment date <small class="text-danger fw-bold">*</small></label>
                                    <RadzenDatePicker @bind-Value=@DateOnly DateFormat="dd/MM/yyyy" Change="@(args => SelectDate(args))" Style="width: 100%" Name="RadzenDatePickerBindValue" ShowCalendarWeek />
                                </div>
                                <div class="mb-3 col-6">
                                    <label for="time" class="form-label medium text-white">Choose appointment time <small class="text-danger fw-bold">*</small></label>
                                    <RadzenDropDown TValue="TimeSpan" Value=@TimeOnly Data=@timeSlots Change="@(args => SelectTime(args))" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent" />
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label medium text-white">Enter health status<small class="text-danger">*</small></label>
                                <textarea class="form-control height-auto" @bind="createBooking.Description" rows="4" placeholder="Enter your health condition, questions to ask your doctor and health issues to consider.." required></textarea>
                            </div>
                            <div class="row" id="multiselect">
                                <div class="mb-3 col-12">
                                    <div class="">
                                        <div class="sd-multiSelect form-group">
                                            <label for="current-job-role" class="form-label medium text-white">Select Service<small class="text-danger">*</small></label>
                                            @if (booking.ProductListViewModels == null)
                                            {
                                                <div class="d-flex">
                                                    <div class="spinner-border text-white me-3" style="width: 2rem; height: 2rem;" role="status">
                                                        <span class="visually-hidden"><em>Loading...</em></span>
                                                    </div>
                                                    <p class="text-white">Loading...</p>
                                                </div>
                                            }
                                            else
                                            {
                                                <RadzenDropDown @bind-Value=@multipleValues Multiple=true AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Name="DropDownGroupingMultiSelect"
                                                                Data=@booking.ProductListViewModels ValueProperty="Id" TextProperty="FormattedName" MaxSelectedLabels="1" Style="margin-bottom: 20px; width: 100%" Change="@(args => Change(args, "DropDown"))">

                                                </RadzenDropDown>
                                                @*<RadzenDropDownDataGrid class="form-select"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowFiltering="true" AllowClear="true"
                                            Data="@booking.ProductListViewModels" @bind-Value="multipleValues" Multiple="true"
                                            TextProperty="Name" ValueProperty="Id" Style="margin-bottom: 20px; width: 100%"
                                            Placeholder="Select Service" MaxSelectedLabels="4"
                                            SelectAllText="Select all items" SelectedItemsText="are now selected"
                                            Change="@(args => Change(args,"DropDown"))">
                                            </RadzenDropDownDataGrid>*@

                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="payment" class="form-label medium text-white">Coupon <small class="text-danger"></small></label>
                                <div class="input-group">
                                    <RadzenTextBox Disabled="@(ExistCoupon == true)" @bind-Value=@coupon class="form-control" aria-label="Default TextBox" />
                                    <button type="button" @onclick="HandleAddCoupon" class="btn btn-warning fw-bold fs-7 text-uppercase">@NameApplyCoupon</button>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="price" class="form-label medium text-white">Total</label>
                                <input type="text" class="form-control" placeholder="@booking.OrderTotal.ToString("C")" readonly="False">
                            </div>
                            <div>
                                <div class="text-center col-lg-5 py-4 mx-auto d-flex justify-content-between">
                                    <a href="/doctor" class="btn btn-warning fw-bold fs-7 rounded-3 border-0 px-4 py-3 text-uppercase" style="width: 110px">Back</a>
                                    <button type="submit" disabled="@Creating" class="btn btn-warning fw-bold fs-7 rounded-3 border-0 px-4 py-3 text-uppercase">Submit</button>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </main>

</body>

@code {
    [Parameter] public string id { get; set; }
    private BookingDetailsViewModel createBooking = new();
    [Inject]
    IAccessTokenProvider TokenProvider { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string accessToken { get; set; }
    private BookingViewModel booking = new();
    string eventValue;
    private string coupon;
    string userId = string.Empty;
    public bool ExistCoupon { get; set; }
    public bool Creating { get; set; }
    IEnumerable<string> multipleValues;
    // Get the list of time slots
    List<TimeSpan> timeSlots = Extension.GetTimeSlots();
    public string NameApplyCoupon = "Apply";
    private DateTime DateOnly { get; set; }
    private TimeSpan TimeOnly { get; set; }
    CouponDto couponObj;
    string ErrorMessage = string.Empty;
    void Change(object value, string name)
    {
        eventValue = value is IEnumerable<object> ? string.Join(",", (IEnumerable<object>)value) : (string)value;
        if (multipleValues.Count() > 3)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "3 services Are Max" });
            List<string> tempList = multipleValues.ToList();
            tempList.RemoveAt(tempList.Count - 1);
            ErrorMessage = "You cannot book appointment";
            multipleValues= tempList;
        }
        else
        {
            ErrorMessage = String.Empty;
            booking.OrderTotal =  booking.ProductListViewModels.Where(x => eventValue.Contains(x.Id)).ToList().Sum((x => x.Price));
            StateHasChanged();
        }
    }
    async Task SelectDate(object value)
    {
        InvokeAsync(async () =>
     {
         // Simulate background task
         await Task.Delay(2000);

         // Close the dialog
         DialogService.Close();
     });
        DateOnly = (DateTime)value;
        if (DateOnly.Add(TimeOnly).Ticks < DateTime.Now.Ticks)
        {
            ErrorMessage = "You can not book time before";
            await BusyDialog(ErrorMessage);
        }
        else
        {
            var response = await clinicService.GetScheduleAsync<ResponseDto>(booking.DoctorId);
            if (response != null && response.IsSuccess)
            {
                var result = JsonConvert.DeserializeObject<List<long>>(Convert.ToString((response.Result)));
                if (result.Any(x => x == DateOnly.Add(TimeOnly).Ticks))
                {
                    ErrorMessage = "Schedule has been booked";
                    await BusyDialog(ErrorMessage);
                }
                else
                {
                    ErrorMessage = string.Empty;
                }
                StateHasChanged();
            }
        }
    }
    async Task SelectTime(object value)
    {
        InvokeAsync(async () =>
      {
          // Simulate background task
          await Task.Delay(2000);

          // Close the dialog
          DialogService.Close();
      });
        TimeOnly = (TimeSpan)value;
        if (DateOnly.Add(TimeOnly).Ticks < DateTime.Now.Ticks)
        {
            ErrorMessage = "You can not book time before";
            await BusyDialog(ErrorMessage);
        }
        else
        {
            var response = await clinicService.GetScheduleAsync<ResponseDto>(booking.DoctorId);
            if (response != null && response.IsSuccess)
            {
                var result = JsonConvert.DeserializeObject<List<long>>(Convert.ToString((response.Result)));
                if (result.Any(x => x == DateOnly.Add(TimeOnly).Ticks))
                {
                    ErrorMessage = "Schedule has been booked";
                    await BusyDialog(ErrorMessage);
                }
                else
                {
                    ErrorMessage = string.Empty;
                }
                StateHasChanged();
            }
        }
    }
    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        var authState = await authenticationStateTask;
        var user = authState.User;
        userId = user.FindFirst(c => c.Type == "sub")?.Value;
        if (!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo("authentication/login");
        }
        var accessTokenResult = await TokenProvider.RequestAccessToken();
        accessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        var response = await clinicService.GetBookingViewAsync<ResponseDto>(id, accessToken);
        if (response != null && response.IsSuccess)
        {
            booking = JsonConvert.DeserializeObject<BookingViewModel>(Convert.ToString((response.Result)));
        }
    }
    private async Task HandleAddCoupon()
    {
        if (!ExistCoupon)
        {
            var discount = await clinicService.GetCoupon<ResponseDto>(coupon, accessToken);
            if (discount != null && discount.IsSuccess)
            {
                couponObj = JsonConvert.DeserializeObject<CouponDto>(Convert.ToString(discount.Result));
                if (couponObj != null)
                {
                    createBooking.DiscountTotal = couponObj.DiscountAmount;
                    booking.OrderTotal = booking.OrderTotal * (1 - couponObj.DiscountAmount / 100);
                    ExistCoupon = true;
                    NameApplyCoupon = "Remove";
                    StateHasChanged();
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Coupon is not available" });
                }
            }
        }
        else if (ExistCoupon)
        {

            var discount = await couponService.RemoveCoupon<ResponseDto>(couponObj.Id);
            if (discount.IsSuccess)
            {
                booking.OrderTotal =  booking.ProductListViewModels.Where(x => eventValue.Contains(x.Id)).ToList().Sum((x => x.Price));
                ExistCoupon = false;
                NameApplyCoupon = "Apply";
                coupon = string.Empty;
                StateHasChanged();
            }
        }
    }
    private async Task HandleBookingCreate()
    {
        InvokeAsync(async () =>
      {
          // Simulate background task
          await Task.Delay(2000);

          // Close the dialog
          DialogService.Close();
      });
        if (ErrorMessage != string.Empty || multipleValues?.Count() == 0 || DateOnly.Add(TimeOnly).Ticks < DateTime.Now.Ticks)
        {
            ErrorMessage = "You cannot book appointment";
            await BusyDialog(ErrorMessage);
        }
        else
        {
            var checkSchedule = await clinicService.GetScheduleAsync<ResponseDto>(booking.DoctorId);
            if (checkSchedule != null && checkSchedule.IsSuccess)
            {
                var result = JsonConvert.DeserializeObject<List<long>>(Convert.ToString((checkSchedule.Result)));
                if (result.Any(x => x == DateOnly.Add(TimeOnly).Ticks))
                {
                    ErrorMessage = "Schedule has been booked";
                    await BusyDialog(ErrorMessage);
                }
            }
            Creating = true;
            createBooking.Id = Guid.NewGuid().ToString();
            createBooking.DoctorId = booking.DoctorId;
            createBooking.Specialization = booking.Specialization;
            createBooking.DoctorName = booking.Name;
            createBooking.UserId = userId;
            createBooking.Products = booking.ProductListViewModels.Where(x => eventValue.Contains(x.Id)).ToList();
            createBooking.CartTotalItems = booking.ProductListViewModels.Where(x => eventValue.Contains(x.Id)).Count();
            createBooking.OrderTotal = booking.OrderTotal;
            createBooking.OrderPlacedDate = DateOnly.Add(TimeOnly).Ticks;
            createBooking.ClinicNum = booking.ClinicNum;
            createBooking.CouponCode = coupon;
            createBooking.ImageUrl = booking.Image;
            var response = await clinicService.CreateOrUpdateBooking<ResponseDto>(createBooking, accessToken);
            if (response != null && response.IsSuccess)
            {
                nav.NavigateTo($"/doctor/book-appointments/confirm/{createBooking.Id}");
            }
            else
            {
                Creating = false;
            }
        }
    }
    async Task BusyDialog(string message)
    {
        await DialogService.OpenAsync("", ds =>
        {
            RenderFragment content = b =>
            {
                b.OpenElement(0, "RadzenRow");

                b.OpenElement(1, "RadzenColumn");
                b.AddAttribute(2, "Size", "12");

                b.AddContent(3, message);

                b.CloseElement();
                b.CloseElement();
            };
            return content;
        }, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }


}
<style>
    .btn-group,
    .btn-group-vertical {
        position: relative;
        display: inline-flex;
        vertical-align: middle;
        width: 100%;
    }

    .multiselect-container {
        position: absolute;
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 100%;
    }

    ul {
        list-style-type: none;
        padding: 0px
    }
    /* Modal Box  */
    :root {
        --theme-color: #041150;
        --theme-color-hover: #041150;
        --theme-color2: #041150;
    }

    .modal-box {
        width: 100%;
        max-width: 500px;
    }

    select:invalid {
        color: gray;
    }

    option {
        color: black;
    }

    .error-message-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999; /* Đảm bảo thông báo hiển thị trên các phần tử khác */
    }

    .error-message {
        background-color: #ffcccc;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

</style>