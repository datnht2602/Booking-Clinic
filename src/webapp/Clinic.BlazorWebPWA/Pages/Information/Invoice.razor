@page "/invoice/{bookingId}"
@inject NavigationManager nav
@inject IClinicService clinicService

<PageTitle>Invoice Detail</PageTitle>

<main>
    <div class="bg-white">
        <div class="container px-5 py-5 appointments hideWhenPrint">
            <div>
                <h2 class="m-auto fw-bold text-center text-black mb-2 mx-auto p-2">INVOICE DETAILS</h2>
                <div class="m-auto bg-primary shadow-lg px-5 pt-3 rounded-3 col-lg-8 mx-auto">
                    <h4 class="m-auto text-center text-white mb-2 mx-auto">Medcial Report</h4>
                    <h5 class="m-auto text-center text-white mb-2 mx-auto">Clinic: 4Health Clinic</h5>

                    <div class="m-2 p-2 d-flex justify-content-center">
                        <div class="d-flex flex-column justify-content-center align-items-center">
                            <div class="spinner-border" role="status" style="width: 4em; height: 4em;">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <h5 class="fs-5 text-center my-2">Loading...</h5>
                        </div>
                        <canvas id="pdf-canvas" class=""> </canvas>
                    </div>
                    <div class="m-3 text-center">
                        <RadzenButton Text="Export" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Medium"
                                      class="hideWhenPrint mb-4" Click=@(_ => ExportPDF()) />
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

@code {
    [Parameter] public string bookingId { get; set; }
    [Inject] IAccessTokenProvider TokenProvider { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public string invoice { get; set; }
    private string accessToken { get; set; }
    public bool Notification { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    protected byte[] PdfBody = Array.Empty<byte>();
    protected event EventHandler<int> RaiseNewHashCode;

    private void ExportPDF()
    {
        JSRuntime?.InvokeVoidAsync("Print", invoice);
    }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        var authState = await authenticationStateTask;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo("authentication/login");
        }

        var accessTokenResult = await TokenProvider.RequestAccessToken();
        accessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }

        var response = await clinicService.GetInvoice<string>(bookingId, accessToken);
        if (response != null)
        {
            invoice = response;
            PdfBody = Convert. FromBase64String(response);
            JSRuntime.InvokeVoidAsync("PdfRenderer.renderPdf", PdfBody);
            StateHasChanged();
        }
    }
    

}