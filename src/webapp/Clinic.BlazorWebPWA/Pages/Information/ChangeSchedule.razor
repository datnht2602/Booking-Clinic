@page "/changeschedule/{bookingId}"
@using Clinic.BlazorWebPWA.Extensions
@using Clinic.BlazorWebPWA.Extensions
@using Clinic.Data.Models
@inject IClinicService clinicService
<PageTitle>Change Schedule</PageTitle>

<div class="container h-100 d-flex justify-content-center align-items-center">
    <div class="card mh-100 shadow-lg m-5" style="border-radius: 1rem; max-width: 600px;">
        <div class="card-body">
            <div class="px-5 py-4" style="background-color: rgba(4, 17, 80); border-top-left-radius: 1rem; border-top-right-radius: 1rem ">
                <h4 class="m-auto text-center text-white mb-2 mx-auto ">Change Schedule</h4>
            </div>
            <div class="mx-4 my-3 px-5 py-4">
                <div class="row">
                    <div class="mb-6 col-md-6">
                        <label for="date" class="form-label medium text-dark">Choose appointment date <small class="text-danger fw-bold">*</small></label>
                        <RadzenDatePicker @bind-Value=@DateOnly DateFormat="dd/MM/yyyy" Change="@(args => SelectDate(args))" Style="width: 100%" Name="RadzenDatePickerBindValue" ShowCalendarWeek />
                     </div>
                     <div class="mb-6 col-md-6">
                         <label for="time" class="form-label medium text-dark">Choose appointment time <small class="text-danger fw-bold">*</small></label>
                         <RadzenDropDown TValue="TimeSpan" Value=@TimeOnly Data=@timeSlots Change="@(args => SelectTime(args))" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent" />
                     </div>
                 </div>
             </div>
             <div class="row justify-content-center pb-5">
                 <div class="col-md-6">
                     <div class="btn-group d-flex justify-content-center">
                         <button @onclick="@(_ => SendSchedule())" Disabled="@notBook" class="btn btn-warning fw-bold fs-7 rounded-3 w-100 border-0 px-4 py-3 text-uppercase"> Confirm </button>
                     </div>
                 </div>
             </div>
         </div>
     </div>
</div>

@code {
    [Parameter] public string bookingId { get; set; }
    [Inject] IAccessTokenProvider TokenProvider { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string accessToken { get; set; }
    BookingDetailsViewModel Booking { get; set; }
    private DateTime DateOnly { get; set; }
    private TimeSpan TimeOnly { get; set; }
    List<TimeSpan> timeSlots = Extension.GetTimeSlots();
    bool notBook;
    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        var authState = await authenticationStateTask;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo("authentication/login");
        }

        var accessTokenResult = await TokenProvider.RequestAccessToken();
        accessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }

        var response = await clinicService.GetBookingByIdAsync<ResponseDto>(bookingId, accessToken);
        if (response != null && response.IsSuccess)
        {
            Booking = JsonConvert.DeserializeObject<BookingDetailsViewModel>(Convert.ToString((response.Result)));
        }
    }
        async Task SelectDate(object value)
    {
        DateOnly = (DateTime)value;
        if (DateOnly.Add(TimeOnly).Ticks < DateTime.Now.Ticks)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "You cannot book time before" });
            notBook = true;
        }
        else
        {
            var response = await clinicService.GetScheduleAsync<ResponseDto>(Booking.DoctorId);
            if (response != null && response.IsSuccess)
            {
                var result = JsonConvert.DeserializeObject<List<long>>(Convert.ToString((response.Result)));
                if (result.Any(x => x == DateOnly.Add(TimeOnly).Ticks))
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "This time was booked" });
                    notBook = true;
                }
                else
                {
                    notBook = false;
                }
            }
            StateHasChanged();
        }
    }

    async Task SelectTime(object value)
    {
        TimeOnly = (TimeSpan)value;
        if (DateOnly.Add(TimeOnly).Ticks < DateTime.Now.Ticks)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "You cannot book time before" });
            notBook = true;
        }
        else
        {
            var response = await clinicService.GetScheduleAsync<ResponseDto>(Booking.DoctorId);
            if (response != null && response.IsSuccess)
            {
                var result = JsonConvert.DeserializeObject<List<long>>(Convert.ToString((response.Result)));
                if (result.Any(x => x == DateOnly.Add(TimeOnly).Ticks))
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "This time was booked" });
                    notBook = true;
                }
                else
                {
                    notBook = false;
                }
            }
            StateHasChanged();
        }
    }
    private async Task SendSchedule()
    {
        Booking.OrderPlacedDate = DateOnly.Add(TimeOnly).Ticks;
        var response = await clinicService.ChangeDoctorBooking<bool>(Booking, accessToken);
        if (response)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Changed  Successfully" });
            nav.NavigateTo("/", forceLoad: true);
        }
    }
}