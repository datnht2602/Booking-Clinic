@page "/view-history/{role}/{id}"
@using Clinic.BlazorWebPWA.Extensions
@inject IClinicService clinicService
@inject IBookingService bookingService
@inject NavigationManager nav
@inject DialogService DialogService

<PageTitle>View Appointment</PageTitle>

<head>
    <link rel="stylesheet" href="css/user.css"/>
</head>

<body style="background: none !important">
<main class="flex-shrink-0">
    <div class="container px-5">
        <div class="user-wrapper">
            <div>
                <div class="row usr-hdr">
                    <SideBarProfile/>
                    <div class="col-md-9 col-lg-9 p-0">
                        <h1 class="user-ttl">Histories</h1>
                        <div class="user-container">
                            <div class="user-body py-3">
                                <!-- Start My Appointment Section -->
                                @if (list == null)
                                {
                                    <h3>Loading</h3>
                                }
                                else
                                {
                                    if (role.Equals("patient"))
                                    {
                                        @foreach (var item in list)
                                        {
                                            <div class="user-card">
                                                <div class="card-hdr">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-6">
                                                            <a href="" class="title">Booking Id: @item.Id</a>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <span class="label label-danger">Done</span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card-body">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-4">
                                                                <img width="28" height="28" src="@(item.ImageUrl ?? "img/avatar_blank.png")" class="rounded-circle m-r-5" alt>
                                                            <div class="user-info tbl-cell">
                                                                <span>Doctor Info</span>
                                                                <h4 class="name">@item.DoctorName</h4>
                                                                <p class="text">@item.Specialization.ConvertSpecEnum()</p>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="info">
                                                                <span>Clinic Number</span>
                                                                <p>@item.ClinicNum</p>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="info">
                                                                <span>Date & Time</span>
                                                                <p>@item.OrderPlacedDate.GetDateTime()</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card-ftr">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-6">
                                                            <span class="font-12 text-dark">Price: @item.OrderTotal.ToString("C")</span>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <button @onclick="@(_ => FeedBack(item.DoctorId,item.Id))" class="btn btn-primary btn-outline btn-outline-1x btn-sm">FeedBack</button>
                                                            <button @onclick="@(_ => Export(item.Id))" class="btn btn-primary btn-outline btn-outline-1x btn-sm">Export</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else if (role.Equals("doctor"))
                                    {
                                        @foreach (var item in list)
                                        {
                                            <div class="user-card">
                                                <div class="card-hdr">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-6">
                                                            <a href="" class="title">Booking Id: @item.Id</a>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <span class="label label-danger">Done</span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card-body">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-4">
                                                            <div class="user-info tbl-cell">
                                                                <span>User Info</span>
                                                                <h4 class="name">@item.BriefViewModel.UserName</h4>
                                                                <p class="text">@item.BriefViewModel.PhoneNumber</p>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="info">
                                                                <span>Date Of Birth</span>
                                                                <p>@item.BriefViewModel.DateOfBirth</p>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="info">
                                                                <span>Date & Time</span>
                                                                <p>@item.OrderPlacedDate.GetDateTime()</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card-ftr">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-6">
                                                            <span class="font-12 text-dark">Sexual: @(item.BriefViewModel.Sexual == 1 ? "Male" : "Female")</span>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <button @onclick="@(_ => Detail(item.Id))" class="btn btn-primary btn-outline btn-outline-1x btn-sm">Detail</button>
                                                            <button @onclick="@(_ => GetFeedBack(item.DoctorId,item.Id))" class="btn btn-primary btn-outline btn-outline-1x btn-sm">See FeedBack</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                }

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
</body>

@code {
    [Parameter] public string id { get; set; }
    [Parameter] public string role { get; set; }
    [Inject] IAccessTokenProvider TokenProvider { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string accessToken { get; set; }
    List<BookingDetailsViewModel> list = new();
    [Inject] IJSRuntime JSRuntime { get; set; }
    string name = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        name = user.Identity.Name;
        if (!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo("authentication/login");
        }

        var accessTokenResult = await TokenProvider.RequestAccessToken();
        accessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }

        long timeNow = DateTime.Now.Ticks;
        if (role.Equals("patient"))
        {
            var response = await bookingService.GetListBookings<ResponseDto>($" e.UserId = '{id}' and e.OrderStatus= '{OrderStatus.Submitted}' and e.OrderPlacedDate < {timeNow} ");
            if (response != null && response.IsSuccess)
            {
                list = JsonConvert.DeserializeObject<List<BookingDetailsViewModel>>(Convert.ToString((response.Result)));
                list = list.OrderByDescending(x => x.OrderPlacedDate).ToList();
                StateHasChanged();
            }
        }
        else if (role.Equals("doctor"))
        {
            var response = await bookingService.GetListBookings<ResponseDto>($" e.DoctorId = '{id}' and e.OrderStatus= '{OrderStatus.Submitted}' and e.OrderPlacedDate < {timeNow}  ");
            if (response != null && response.IsSuccess)
            {
                list = JsonConvert.DeserializeObject<List<BookingDetailsViewModel>>(Convert.ToString((response.Result)));
                list = list.OrderByDescending(x => x.OrderPlacedDate).ToList();
                StateHasChanged();
            }
        }
    }

    private async Task Export(string id)
    {
        var response = await clinicService.GetExportString<string>(id, accessToken);
        if (response != null)
        {
            JSRuntime?.InvokeVoidAsync("Print", response);
        }
    }

    private async Task FeedBack(string doctorId,string bookingId)
    {
        var form = new FormDto()
        {
            UserName = name,
            DoctorId = doctorId,
            BookingId = bookingId
        };
        await DialogService.OpenAsync<Feedback_form>($"Feedback Form",
            new Dictionary<string, object>() { { "form", form } },
            new DialogOptions() { Width = "700px", Height = "", Resizable = true, Draggable = true });
    }
    private async Task Detail(string id)
    {
        var item = list.FirstOrDefault(x => x.Id == id);
        if (item != null)
        {
            var parameters = new Dictionary<string, object> { { "Booking", item } };
            var dialogResult = await DialogService.OpenAsync<HistoryDetail>("History Detail", parameters, new Radzen.DialogOptions { Width = "650px", Height = "500px" });
            // Xử lý kết quả từ dialog nếu cần
        }
    }
    private async Task GetFeedBack(string doctorId,string bookingId)
    {
        await DialogService.OpenAsync<Feedback_form>($"Feedback",
            new Dictionary<string, object>() { { "id", doctorId }, { "bookingId", bookingId } },
            new DialogOptions() { Width = "700px", Height = "", Resizable = true, Draggable = true });
    }

}

