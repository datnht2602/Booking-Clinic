@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims

<div class="col-md-3 col-lg-3 p-0">
    <div class="user-name">
        <div class="tbl-cell">
            <i class="fa-solid fa-circle-user"></i>
        </div>
        <div class="tbl-cell">
            <span>Hello</span>
            <h2>@name</h2>
        </div>
    </div>
    <div class="user-menu">
        <ul>
            @if (@context.User.IsInRole("patient"))
            {
                <li class="user-profile">
                    <a href=@($"/profile/{@context.User.FindFirst(c => c.Type == "sub")?.Value}")><i class="fa-solid fa-user-injured"></i>Profile</a>
                </li>
                <li class="user-records ">
                    <a href=@($"/view-cart/{@context.User.FindFirst(c => c.Type == "role")?.Value}/{@context.User.FindFirst(c => c.Type == "sub")?.Value}")><i class="fa-solid fa-laptop-medical"></i>Cart</a>
                </li>
            }
            <li class="user-appointments">
                <a href=@($"/view-appointment/{@context.User.FindFirst(c => c.Type == "role")?.Value}/{@context.User.FindFirst(c => c.Type == "sub")?.Value}")><i class="fa-solid fa-calendar-days"></i>Appointments</a>
            </li>

            <li class="user-appointments">
                <a href=@($"/view-history/{@context.User.FindFirst(c => c.Type == "role")?.Value}/{@context.User.FindFirst(c => c.Type == "sub")?.Value}")><i class="fa-solid fa-clock-rotate-left"></i>History</a>
            </li>
            <li class="user-chat">
                @*
                <a href=@($"/chat/{@context.User.FindFirst(c => c.Type == "role")?.Value}/{@context.User.FindFirst(c => c.Type == "sub")?.Value}")><i class="fa-solid fa-unlock"></i>Change Password</a>
                *@
                <a href="chat"> <i class="fa-solid fa-message"></i> Chat</a>
            </li>
            <li class="user-change-password ">
                <a href=@($"/change-password/{@context.User.FindFirst(c => c.Type == "role")?.Value}/{@context.User.FindFirst(c => c.Type == "sub")?.Value}")><i class="fa-solid fa-unlock"></i>Change Password</a>
            </li>
        </ul>
    </div>
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    AuthenticationState context { get; set; }
    string name = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        context = await authenticationStateTask;
        var user = context.User;
        name = user.Identity.Name;
        if (!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo("authentication/login");
        }

        StateHasChanged();
    }

}