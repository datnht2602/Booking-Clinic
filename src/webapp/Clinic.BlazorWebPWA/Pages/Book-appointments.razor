@page "/doctor/doctor-detail/book-appointments"
@page "/doctor/book-appointments/{id}"
@page "/book-appointments"
@using Clinic.DTO.Models.Dto
@using Clinic.BlazorWebPWA.Extensions
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IClinicService clinicService
@inject NavigationManager nav
<PageTitle>Booking Appointment</PageTitle>

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>

 <body>
 <style>
        .btn-group,
        .btn-group-vertical {
            position: relative;
            display: inline-flex;
            vertical-align: middle;
            width: 100%;
        }

        .multiselect-container {
            position: absolute;
            list-style-type: none;
            margin: 0;
            padding: 0;
            width: 100%;
        }

        ul {
            list-style-type: none;
            padding: 0px
        }
        /* Modal Box  */
        :root {
            --theme-color: #041150;
            --theme-color-hover: #041150;
            --theme-color2: #041150;
        }

        .modal-box {
            width: 100%;
            max-width: 500px;
        }

        /* Custom Multi Select */
       
    </style>
 <main>
     <div class="bg-white">
         <div class="container px-5 py-5 appointments">
             <div>
                 <h2 class="m-auto fw-bold text-center text-black mb-2 mx-auto p-2">BOOKING APPOINTMENT</h2>
                 <EditForm Model="createBooking" OnValidSubmit="HandleBookingCreate">
                 <div class="m-auto bg-primary shadow-sm p-5 rounded-3 col-lg-8 mx-auto">
                         @*<div class="mb-3">
                                <label for="fullname" class="form-label medium text-white">Full Name <small class="text-danger">*</small></label>
                                <input type="text" id="fullName" class="form-control" placeholder="Nguyễn Văn A" pattern="[^\s]+" title="Please do not enter spaces" required>
                            </div>
                            <div class="mb-3">
                                <label for="phoneNumbers" class="form-label medium text-white">Phone Number <small class="text-danger">*</small></label>
                            <input type="tel" id="phoneNumbers" class="form-control" placeholder="Input Phone Number" required pattern="0[0-9]{9}" title="Please enter a valid phone number" oninput="this.setCustomValidity('')" oninvalid="this.setCustomValidity('Please enter a valid phone number without spaces.')">
                            </div>*@
                         <div class="row">
                             <div class="mb-3 col-6">
                                 <label for="major" class="form-label medium text-white">Specialization</label>
                                 <input type="text" class="form-control" placeholder="@booking.Specialization.ConvertSpecEnum()" readonly="False">
                                 @*<select id="specialization" class="form-select" required aria-label="Select Specializtion">
                                        <option value="">Select Specializtion</option>
                                        <option value="1">Specializtion 1</option>
                                        <option value="2">Specializtion 2</option>
                                        <option value="3">Specializtion 3</option>
                                    </select>*@
                             </div>
                             <div class="mb-3 col-6">
                                 <label for="doctor" class="form-label medium text-white">Doctor</label>
                                 <input type="text" class="form-control" placeholder="@booking.Name" readonly="False">
                                 
                                 @*<select id="doctor" class="form-select" required aria-label="Select Doctor">
                                        <option value="">Select Doctor</option>
                                        <option value="1">Doctor 1</option>
                                        <option value="2">Doctor 2</option>
                                        <option value="3">Doctor 3</option>
                                    </select>*@
                             </div>
                         </div>
                         <div class="mb-3">
                                <label for="date" class="form-label medium text-white">Select the date and time frame you want to be examined<small class="text-danger fw-bold">*</small></label>
                             <InputSelect @bind-Value="createBooking.OrderPlacedDate" id="doctor" class="form-select">
                                 <option value="">-------------------</option>
                                 @foreach (var timeSlot in timeSlots)
                                 {
                                     <option value="@timeSlot.Ticks">@timeSlot.ToString()</option>
                                 }
                                    @*<option value="">Select the date and time frame you want to be examined</option>
                                    <option value="1">Doctor 1</option>
                                    <option value="2">Doctor 2</option>
                                    <option value="3">Doctor 3</option>*@
                             </InputSelect>
                         </div>
                         <div class="mb-3">
                                <label class="form-label medium text-white">Enter health condition <small class="text-danger">*</small></label>
                                <textarea class="form-control height-auto" @bind="createBooking.Description" rows="4" placeholder="Enter your health condition, questions for your doctor, and health problems." required></textarea>
                         </div>
                         <div class="row" id="multiselect">
                             <div class="mb-3 col-6">
                                 <div class="modal-box">
                                     <div class="sd-multiSelect form-group">
                                         <label for="current-job-role" class="form-label medium text-white">Select Service<small class="text-danger">*</small></label>
                                         @if (booking.ProductListViewModels == null)
                                         {
                                             <p><em>Loading....</em></p>
                                         }
                                         else
                                         {
                                             <RadzenDropDownDataGrid  FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                     AllowFiltering="true" AllowClear="true" 
                                                                     Data="@booking.ProductListViewModels" @bind-Value="multipleValues" Multiple="true"
                                                                     TextProperty="Name" ValueProperty="Id" Style="margin-bottom: 20px"
                                                                        Placeholder="Select Service"
                                                                     Change="@(args => Change(args,"DropDown"))"></RadzenDropDownDataGrid>
                                         }
                                     </div>
                                 </div>
                             </div>
                             <div class="mb-3 col-6">
                                 <label for="payment" class="form-label medium text-white">Payment Method <small class="text-danger">*</small></label>
                                 <InputSelect @bind-Value="createBooking.PaymentMode" class="form-select" >
                                        <option value="">Payment Method </option>
                                     <option value="1">QR Pay</option>
                                     <option value="2">Banking</option>
                                     <option value="3">Momo</option>
                                 </InputSelect>
                             </div>
                         </div>
                         <div class="mb-3">
                             <label for="price" class="form-label medium text-white">Total</label>
                             <input type="text" class="form-control" placeholder="2.000.000 đ" readonly="False">
                         </div>
                         <div>
                             <div class="text-center col-lg-5 py-4 mx-auto">
                                 <button type="submit" class="btn btn-warning fw-bold fs-7 rounded-3 border-0 px-4 py-3 text-uppercase">Booking</button>
                             </div>
                         </div>
                 </div>
                 </EditForm>
             </div>
         </div>
     </div>
 </main>
 
 </body>
 
@code{
    [Parameter] public string id { get; set; }
    private BookingDetailsViewModel createBooking = new();
    [Inject]
    IAccessTokenProvider TokenProvider { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string accessToken { get; set; }
    private BookingViewModel booking = new();
    string eventValue;
    string userId = string.Empty;
    IEnumerable<string> multipleValues;
    int total = 0;
    void Change(object value, string name)
    {
        eventValue = value is IEnumerable<object> ? string.Join(",", (IEnumerable<object>)value) : (string)value;
        total = booking.ProductListViewModels.Where(x => eventValue.Contains(x.Id)).ToList().Sum((x => x.Price));
        StateHasChanged();
    }
    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        var authState = await authenticationStateTask;
        var user = authState.User;
        userId = user.FindFirst(c => c.Type == "sub")?.Value;
        if(!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo("authentication/login");
        }
        var accessTokenResult = await TokenProvider.RequestAccessToken();
        accessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        var response = await clinicService.GetBookingViewAsync<ResponseDto>(id,accessToken);
        if (response != null && response.IsSuccess)
        {
            booking = JsonConvert.DeserializeObject<BookingViewModel>(Convert.ToString((response.Result)));
        }
    }
    private async Task HandleBookingCreate()
    {
        createBooking.Id = Guid.NewGuid().ToString();
        createBooking.DoctorId = booking.DoctorId;
        createBooking.Specialization = booking.Specialization;
        createBooking.DoctorName = booking.Name;
        //var userId = User.Claims.Where(u => u.Type == "sub")?.FirstOrDefault()?.Value;
        createBooking.UserId = userId;
        createBooking.Products = booking.ProductListViewModels.Where(x => eventValue.Contains(x.Id)).ToList();
        createBooking.CartTotalItems = booking.ProductListViewModels.Where(x => eventValue.Contains(x.Id)).Count();
        var response = await clinicService.CreateOrUpdateBooking<ResponseDto>(createBooking,accessToken);
        if (response != null && response.IsSuccess)
        {
            nav.NavigateTo($"/doctor/book-appointments/confirm/{createBooking.Id}");
        }
    }
   

    // Get the list of time slots
    List<DateTime> timeSlots = Extension.GetTimeSlots();
}