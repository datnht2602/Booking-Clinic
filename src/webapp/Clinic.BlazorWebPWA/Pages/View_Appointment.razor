@page "/view-appointment/{role}/{id}"
@using Clinic.DTO.Models.Dto
@using Clinic.BlazorWebPWA.Extensions
@using InvoiceSamurai.Shared
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QuestPDF.Fluent
@inject IClinicService clinicService
@inject IBookingService bookingService
@inject NavigationManager nav
@inject DialogService DialogService

<PageTitle>View Appointment</PageTitle>

<head>
    <link rel="stylesheet" href="css/user.css" />
</head>

<body style="background: none !important">
    <main class="flex-shrink-0">
        <div class="container px-5">
            <div class="user-wrapper">
                <div>
                    <div class="row usr-hdr">
                      <SideBarProfile/>
                        <div class="col-md-9 col-lg-9 p-0">
                            <h1 class="user-ttl">Appointments</h1>
                            <div class="user-container">
                                <div class="user-body py-3">
                                    @if(list == null)
                                    {
                                        <h3>Loading</h3>
                                    }
                                    else
                                    {
                                        if (role.Equals("patient"))
                                        {
                                              @foreach (var item in list)
                                        {
                                            <div class="user-card">
                                                <div class="card-hdr">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-6">
                                                            <a href="" class="title">Booking Id: @item.Id</a>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <span class="label label-success">In Progress</span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card-body">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-4">
                                                            <div class="user-info tbl-cell">
                                                                <span>Doctor Info</span>
                                                                <h4 class="name">@item.DoctorName</h4>
                                                                <p class="text">@item.Specialization.ConvertSpecEnum()</p>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="info">
                                                                <span>Clinic Number</span>
                                                                <p>@item.ClinicNum</p>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="info">
                                                                <span>Date & Time</span>
                                                                <p>@item.OrderPlacedDate.GetDateTime()</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card-ftr">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-6">
                                                            <span class="font-12 text-dark">Price: @item.OrderTotal.ToString("C") vnd</span>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <button @onclick="@(_ =>Detail(item.Id))" class="btn btn-primary btn-outline btn-outline-1x btn-sm">Detail</button>
                                                            <button @onclick="@(_ =>Contact())" class="btn btn-primary btn-outline btn-outline-1x btn-sm">Contact With Doctor</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        }
                                        else if (role.Equals("doctor"))
                                        {
                                            foreach (var item in list)
                                        {
                                            <div class="user-card">
                                                <div class="card-hdr">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-6">
                                                            <a href="" class="title">Booking Id: @item.Id</a>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <span class="label label-warning">In Progress</span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card-body">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-4">
                                                            <div class="user-info tbl-cell">
                                                                <span>User Info</span>
                                                                <h4 class="name">@item.BriefViewModel.UserName</h4>
                                                                <p class="text">@item.BriefViewModel.PhoneNumber</p>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="info">
                                                                <span>Date Of Birth</span>
                                                                <p>@item.BriefViewModel.DateOfBirth</p>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="info">
                                                                <span>Date & Time</span>
                                                                <p>@item.OrderPlacedDate.GetDateTime()</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card-ftr">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-6">
                                                            <span class="font-12 text-dark">Sexual: @(item.BriefViewModel.Sexual == 1 ? "Male" : "Female")</span>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <button @onclick="@(_ =>Detail(item.Id))" class="btn btn-primary btn-outline btn-outline-1x btn-sm">Detail</button>
                                                            <button @onclick="@(_ =>ChangeScheduleTime(item.Id))" class="btn btn-primary btn-outline btn-outline-1x btn-sm">Change Schedule Time</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        }
                                    }
                                                                     
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
</body>

@code {
    [Parameter] public string id { get; set; }
    [Parameter] public string role { get; set; }
    [Inject]
    IAccessTokenProvider TokenProvider { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string accessToken { get; set; }
    List<BookingDetailsViewModel> list = new();
    [Inject] IJSRuntime JSRuntime { get; set; }
    protected InvoiceModel InvoiceModel { get; set; } = new();
    protected CustomerModel CustomModel { get; set; } = new();
    protected GeneratePdfCommand pdfCommand = new();
    string name = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        name = user.Identity.Name;
        if (!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo("authentication/login");
        }
        var accessTokenResult = await TokenProvider.RequestAccessToken();
        accessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }

        if (role.Equals("patient"))
        {
            long timeNow = DateTime.Now.Ticks;
            var response = await bookingService.GetListBookings<ResponseDto>($" e.UserId = '{id}' and e.OrderStatus= '{OrderStatus.Submitted}' and e.OrderPlacedDate > {timeNow} ");
            if (response != null && response.IsSuccess)
            {
                list = JsonConvert.DeserializeObject<List<BookingDetailsViewModel>>(Convert.ToString((response.Result)));
                list = list.OrderByDescending(x => x.OrderPlacedDate).ToList();
                StateHasChanged();
            }
        }else if (role.Equals("doctor"))
        {
            long timeNow = DateTime.Now.Ticks;
            var response = await bookingService.GetListBookings<ResponseDto>($" e.DoctorId = '{id}' and e.OrderStatus= '{OrderStatus.Submitted}' and e.OrderPlacedDate > {timeNow} ");
            if (response != null && response.IsSuccess)
            {
                list = JsonConvert.DeserializeObject<List<BookingDetailsViewModel>>(Convert.ToString((response.Result)));
                list = list.OrderByDescending(x => x.OrderPlacedDate).ToList();
                StateHasChanged();
            }
        }
    }

    private async Task Detail(string id)
    {
        var item = list.FirstOrDefault(x => x.Id == id);
        if (item != null)
        {
            var parameters = new Dictionary<string, object> { { "Booking", item }, { "role", role }, { "id", id } };
            var dialogResult = await DialogService.OpenAsync<AppointmentDetailComponent>("Appointment Detail", parameters, new Radzen.DialogOptions { Width = "650px", Height = "500px" });
            // Xử lý kết quả từ dialog nếu cần
        }
    }


    private async Task ChangeScheduleTime(string id)
    {
        var confirmationResult = await this.DialogService.Confirm("Are you sure?", "Change Schedule", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirmationResult == true)
        {
            var item = list.FirstOrDefault(x => x.Id == id);
            var response = await clinicService.ChangeSchedule<HttpResponseMessage>(item, accessToken);
            if (response.IsSuccessStatusCode)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Changed  Successfully" });
            }                      
        }
    }
    private async Task Contact()
    {
       
    }
}
