@page "/invoice/{bookingId}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using InvoiceSamurai.Shared
@using InvoiceSamurai.Client.Documents
@using QuestPDF.Fluent
@inject NavigationManager nav
@inject IClinicService clinicService

<PageTitle>Invoice Detail</PageTitle>

<main>
    <div class="bg-white">
        <div class="container px-5 py-5 appointments hideWhenPrint">
            <div>
                <h2 class="m-auto fw-bold text-center text-black mb-2 mx-auto p-2">INVOICE DETAILS</h2>
                <div class="m-auto bg-primary shadow-lg px-5 pt-3 rounded-3 col-lg-8 mx-auto">
                    <h4 class="m-auto text-center text-white mb-2 mx-auto">Medcial Report</h4>
                    <h5 class="m-auto text-center text-white mb-5 mx-auto">Clinic: 4Health Clinic</h5>
                </div>
            </div>
        </div>
        <div class="container px-5 py-5 appointments">
            <div class="m-auto bg-white  mx-auto">
                @{ RenderPdf(); }
                @if (PdfBody.Length == 0)
                {
                    <div class="d-flex justify-content-center mt-3" style="width: 100%;">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Rendering pdf</span>
                        </div>
                        <div class="h3 ml-2">Rendering pdf...</div>
                    </div>
                }
                <canvas id="pdf-canvas"> </canvas>
            </div>
            <RadzenButton Text="Export" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Medium"
                          class="hideWhenPrint" Click=@(_ => ExportPDF())/>
        </div>

    </div>
</main>

@code{
    [Parameter] public string bookingId { get; set; }
    [Inject] IAccessTokenProvider TokenProvider { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public InvoiceDetailsViewModel ViewModel { get; set; }
    private string accessToken { get; set; }
    public bool Notification { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    protected InvoiceModel InvoiceModel { get; set; } = new();
    protected CustomerModel CustomModel { get; set; } = new();
    protected GeneratePdfCommand pdfCommand = new();
    protected byte[] PdfBody = Array.Empty<byte>();
    protected event EventHandler<int> RaiseNewHashCode;

    private void ExportPDF()
    {
        JSRuntime?.InvokeVoidAsync("Print");
    }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        var authState = await authenticationStateTask;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo("authentication/login");
        }

        var accessTokenResult = await TokenProvider.RequestAccessToken();
        accessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }

        var response = await clinicService.GetInvoice<ResponseDto>(bookingId, accessToken);
        if (response != null && response.IsSuccess)
        {
            ViewModel = JsonConvert.DeserializeObject<InvoiceDetailsViewModel>(Convert.ToString((response.Result)));
            InvoiceModel.Coupon = ViewModel.Coupon;
            InvoiceModel.Itens = ViewModel.Products;
            CustomModel.Dob = ViewModel.BriefViewModel.DateOfBirth;
            CustomModel.Name = ViewModel.BriefViewModel.UserName;
            InvoiceModel.Number = ViewModel.Id;
            StateHasChanged();
        }
    }

    private void HandleIncomingPdf(byte[] pdfBody)
    {
        PdfBody = pdfBody;
        JSRuntime.InvokeVoidAsync("PdfRenderer.renderPdf", pdfBody);
        StateHasChanged();
    }

    int previousCommand = -1;

    protected void RenderPdf()
    {
        pdfCommand = pdfCommand with
        {
            Invoice = InvoiceModel,
            Customer = CustomModel
        };
        if (pdfCommand.GetHashCode() == previousCommand)
        {
            return;
        }

        previousCommand = pdfCommand.GetHashCode();
        RaiseNewHashCode?.Invoke(this, previousCommand);

        PdfBody = Array.Empty<byte>();
        JSRuntime?.InvokeVoidAsync("PdfRenderer.clearCanvas");
        var document = new InvoiceDocument(pdfCommand);
        HandleIncomingPdf(document.GeneratePdf());
    }

}