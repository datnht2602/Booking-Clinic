@page "/booking-health-packages/{id}"
@using Clinic.BlazorWebPWA.Extensions
@using Clinic.Data.Models
@using Clinic.DTO.Models.Model
@inject IProductService productService
@inject IClinicService clinicService
<PageTitle>Booking Health Package</PageTitle>

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"/>
</head>

<body>
<main>
    <div class="bg-white">
        <div class="container px-5 py-5 appointments">
            <div>
                <h2 class="m-auto fw-bold text-center text-black mb-2 mx-auto p-3">BOOKING HEALTH PACKAGE</h2>
                <EditForm Model="viewModel" OnValidSubmit="HandleBookingCreate">
                    <div class="m-auto bg-primary shadow-sm p-5 rounded-3 col-lg-8 mx-auto">
                        <div class="row">
                            <div class="mb-3 col-12">
                                <label for="major" class="form-label medium text-white">Name Combo</label>
                                <input type="text" class="form-control" placeholder="@viewModel.Name" readonly="False">
                            </div>
                        </div>
                        <div class="row">
                            <div class="mb-3 col-6">
                                <label for="date" class="form-label medium text-white">Choose appointment date <small class="text-danger fw-bold">*</small></label>
                                <RadzenDatePicker @bind-Value=@DateOnly DateFormat="dd/MM/yyyy" Change="@(args => SelectDate(args))" Style="width: 100%" Name="RadzenDatePickerBindValue" ShowCalendarWeek/>
                            </div>
                            <div class="mb-3 col-6">
                                <label for="time" class="form-label medium text-white">Choose appointment time <small class="text-danger fw-bold">*</small></label>
                                <RadzenDropDown TValue="TimeSpan" Value=@TimeOnly Data=@timeSlots Change="@(args => SelectTime(args))" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent"/>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label medium text-white">Enter health status<small class="text-danger">*</small></label>
                            <textarea class="form-control height-auto" @bind="createBooking.Description" rows="4" placeholder="Enter your health condition, questions to ask your doctor and health issues to consider.." required></textarea>
                        </div>
                        <div class="row" id="multiselect">
                            <div class="mb-3 col-12">
                                <div class="">
                                    <div class="sd-multiSelect form-group">
                                        <label for="current-job-role" class="form-label medium text-white">Select Service<small class="text-danger">*</small></label>
                                        @if (viewModel.Products == null)
                                        {
                                            <p class="text-white">
                                                <em>Loading....</em>
                                            </p>
                                        }
                                        else
                                        {
                                           
                                            <RadzenDropDown @bind-Value=@multipleValues Multiple=true AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Name="DropDownGroupingMultiSelect"
                                                            Data=@viewModel.Products  ValueProperty="Id" TextProperty="FormattedName" MaxSelectedLabels="1" Style="margin-bottom: 20px; width: 100%"  Change="@(args => Change(args, "DropDown"))">
                                                
                                            </RadzenDropDown>
                                            @*<RadzenDropDownDataGrid class="form-select"
                                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                    AllowFiltering="true" AllowClear="true"
                                                                    Data="@viewModel.Products" @bind-Value="multipleValues" Multiple="true"
                                                                    TextProperty="Name" ValueProperty="Id" Style="margin-bottom: 20px; width: 100%"
                                                                    Placeholder="Select Service" MaxSelectedLabels="4"
                                                                    SelectAllText="Select all items" SelectedItemsText="are now selected"
                                                                    Change="@(args => Change(args, "DropDown"))">
                                            </RadzenDropDownDataGrid>*@
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-9">
                                <label for="payment" class="form-label medium text-white">Coupon <small class="text-danger"></small></label>
                                <RadzenTextBox Disabled="@(ExistCoupon == true)" @bind-Value=@coupon class="w-100" aria-label="Default TextBox"/>
                            </div>
                            <div class="col-md-3 d-flex justify-content-md-center align-items-md-end">
                                <button type="button" @onclick="HandleAddCoupon" class="btn btn-warning fw-bold fs-7 rounded-3 border-0 px-4 py-2 text-uppercase">@NameApplyCoupon</button>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="price" class="form-label medium text-white">Total</label>
                                <input type="text" class="form-control" placeholder="@viewModel.Price.ToString("C")" readonly="False">
                        </div>
                        <div>
                                <div class="text-center col-lg-5 py-4 mx-auto d-flex justify-content-between">
                                    <a href="/health-packages" class="btn btn-warning fw-bold fs-7 rounded-3 border-0 px-4 py-3 text-uppercase" style="width: 110px">Back</a>
                                <button type="submit" disabled="@Creating" class="btn btn-warning fw-bold fs-7 rounded-3 border-0 px-4 py-3 text-uppercase">Submit</button>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>

    </div>
</main>

</body>

@code {
    [Parameter] public string id { get; set; }
    private BookingDetailsViewModel createBooking = new();
    [Inject] IAccessTokenProvider TokenProvider { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string accessToken { get; set; }
    private HealthPackageModel viewModel = new();
    string eventValue;
    private string coupon;
    string userId = string.Empty;
    public bool ExistCoupon { get; set; }
    public bool Creating { get; set; }

    IEnumerable<string> multipleValues;

    // Get the list of time slots
    List<TimeSpan> timeSlots = Extension.GetTimeSlots();
    public string NameApplyCoupon = "Apply";
    private DateTime DateOnly { get; set; }
    private TimeSpan TimeOnly { get; set; }
    public string FormattedTotal => $"{viewModel.Price:C} vnd";
    string ErrorMessage = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        var authState = await authenticationStateTask;
        var user = authState.User;
        userId = user.FindFirst(c => c.Type == "sub")?.Value;
        if (!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo("authentication/login");
        }

        var accessTokenResult = await TokenProvider.RequestAccessToken();
        accessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }

        var response = await productService.GetHealthPackage<ResponseDto>(id);
        if (response != null && response.IsSuccess)
        {
            viewModel = JsonConvert.DeserializeObject<HealthPackageModel>(Convert.ToString((response.Result)));
            multipleValues = viewModel.Products != null ? viewModel.Products.Select(x => x.Id).AsEnumerable() : [];
        }
    }
   async Task SelectDate(object value)
    {
        InvokeAsync(async () =>
     {
         // Simulate background task
         await Task.Delay(2000);

         // Close the dialog
         DialogService.Close();
     });
        DateOnly = (DateTime)value;
        if (DateOnly.Add(TimeOnly).Ticks < DateTime.Now.Ticks)
        {
            ErrorMessage = "You can not book time before";
            await BusyDialog(ErrorMessage);
        }
        else
        {
            ErrorMessage = string.Empty;
        }

    }
    async Task SelectTime(object value)
    {
        InvokeAsync(async () =>
      {
          // Simulate background task
          await Task.Delay(2000);

          // Close the dialog
          DialogService.Close();
      });
        TimeOnly = (TimeSpan)value;
        if (DateOnly.Add(TimeOnly).Ticks < DateTime.Now.Ticks)
        {
            ErrorMessage = "You can not book time before";
            await BusyDialog(ErrorMessage);
        }else
        {
            ErrorMessage = string.Empty;
        }
    }
    void Change(object value, string name)
    {
        eventValue = value is IEnumerable<object> ? string.Join(",", (IEnumerable<object>)value) : (string)value;


        viewModel.Price = viewModel.Products.Where(x => multipleValues.Contains(x.Id)).ToList().Sum((x => x.Price));
        StateHasChanged();
    }

    private async Task HandleAddCoupon()
    {
        if (!ExistCoupon)
        {
            var discount = await clinicService.GetCoupon<ResponseDto>(coupon, accessToken);
            if (discount != null && discount.IsSuccess)
            {
                var couponObj = JsonConvert.DeserializeObject<CouponDto>(Convert.ToString(discount.Result));
                createBooking.DiscountTotal = couponObj.DiscountAmount;
                viewModel.Price -= viewModel.Price * (createBooking.DiscountTotal / 100);
                ExistCoupon = true;
                NameApplyCoupon = "Remove";
                StateHasChanged();
            }
        }
        else if (ExistCoupon)
        {
            viewModel.Price = viewModel.Products.Where(x => multipleValues.Contains(x.Id)).ToList().Sum((x => x.Price));
            ExistCoupon = false;
            NameApplyCoupon = "Apply";
            coupon = string.Empty;
            StateHasChanged();
        }
    }

    private async Task HandleBookingCreate()
    {
        InvokeAsync(async () =>
        {
            // Simulate background task
            await Task.Delay(2000);

            // Close the dialog
            DialogService.Close();
        });
        if (ErrorMessage != string.Empty)
        {
            ErrorMessage = "You cannot book health package";
            await BusyDialog(ErrorMessage);
        }
        else
        {
            Creating = true;
            createBooking.Id = Guid.NewGuid().ToString();
            createBooking.UserId = userId;
            createBooking.ComboName = viewModel.Name;
            createBooking.Products = viewModel.Products.Where(x => multipleValues.Contains(x.Id)).ToList();
            createBooking.CartTotalItems = viewModel.Products.Where(x => multipleValues.Contains(x.Id)).Count();
            createBooking.OrderTotal = viewModel.Price;
            createBooking.OrderPlacedDate = DateOnly.Add(TimeOnly).Ticks;
            var response = await clinicService.CreateOrUpdateBooking<ResponseDto>(createBooking, accessToken);
            if (response != null && response.IsSuccess)
            {
                nav.NavigateTo($"/healthpackage/confirm/{createBooking.Id}");
            }
            else
            {
                Creating = false;
            } 
        }
    }

    async Task BusyDialog(string message)
    {
        await DialogService.OpenAsync("", ds =>
        {
            RenderFragment content = b =>
            {
                b.OpenElement(0, "RadzenRow");

                b.OpenElement(1, "RadzenColumn");
                b.AddAttribute(2, "Size", "12");

                b.AddContent(3, message);

                b.CloseElement();
                b.CloseElement();
            };
            return content;
        }, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

}