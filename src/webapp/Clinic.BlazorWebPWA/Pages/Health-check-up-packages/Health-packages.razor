@page "/health-packages"
@using Clinic.Data.Models
@inject IProductService productService
@inject DialogService DialogService
<PageTitle>Health Packages</PageTitle>

<head>
    <link href="css/doctor.css" rel="stylesheet" />
</head>

<body>
    <main class="flex-shrink-0">
        <div class="bg-primary">
            <header class="bg-primary py-4 inner-header">
                <div class="container py-3 px-5">
                    <div class="row gx-5 align-items-center justify-content-center">
                        <div class="col-lg-12">
                            <div class="text-center">
                                <h1 class="fw-bold text-white text-uppercase">Health Packages</h1>
                            </div>
                        </div>
                    </div>
                </div>
            </header>
        </div>

        <!-- Search bar-->
        <!--Health packages card-->
        <section class="py-3">
            <div class="container px-5 mt-3">
                <div class="row gx-5">
                    @if (GetListProducts == null)
                    {
                        <h3>Loading...</h3>
                    }
                    else
                    {
                        @foreach (var item in GetListProducts)
                        {
                            <div class="col-12">
                        <div class="card mb-5">
                            <div class="bg-white shadow-sm border">
                                <div class="card-body align-items-center mx-3">
                                    <div class="mb-2">
                                        <h4 class="fw-bold card-title">@item.Name</h4>
                                        @*<h5 class="card-subtitle mb-0">@item.</h5>*@
                                    </div>

                                    <div class="card-text">
                                        <p class="text-muted mb-2">@item.Description</p>
                                    </div>
                                    <div class="d-flex justify-content-start gap-3">
                                        <p class="fw-bold my-auto fs-6"> Rating: </p>
                                        <div class="stars gap-2 fs-5">
                                            @for (int i = 0; i < item.Rating; i++)
                                            {
                                                <i class="fa-solid fa-star" style="color: rgb(255, 210, 48);"></i>
                                            }
                                        </div>
                                        <p class="fw-bold my-auto fs-6">@item.Rating/5 </p>
                                    </div>
                                </div>

                                <div class="d-flex align-items-center justify-content-between card-footer">
                                    <div class="mx-3">
                                        <h6 class="my-auto fw-bold">Price: @item.Price đ</h6>
                                    </div>

                                    <div class="d-flex mx-3 gap-2">
                                         <RadzenButton Text="Detail" ButtonStyle="ButtonStyle.Info"
                                                          Click=@(args => ShowDetail(@item.Id)) />
                                        <a href="/health-packages" class="btn btn-info card-link">Booking Appointment</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                        }
                    }
                </div>
            </div>
        </section>
        
    </main>

    <script>
        document.querySelectorAll(".stars").forEach((starsContainer) => {
            const stars = starsContainer.querySelectorAll(".bi-star-fill");

            stars.forEach((star, index1) => {
                star.addEventListener("click", () => {
                    stars.forEach((otherStar, index2) => {
                        index1 >= index2
                            ? otherStar.classList.add("active")
                            : otherStar.classList.remove("active");
                    });

                    // Update the rating display based on the clicked star
                    const ratingDisplay = starsContainer.nextElementSibling.querySelector(".fw-bold.my-auto.fs-6");
                    ratingDisplay.textContent = `${index1 + 1}/5`;
                });
            });
        });
    </script>

</body>
@code{
    private List<Product> GetListProducts = new();
    protected override async Task OnInitializedAsync()
    {
        var response = await productService.GetListProducts<ResponseDto>("e.IsMainCombo = true");
        if (response != null && response.IsSuccess)
        {
            GetListProducts = JsonConvert.DeserializeObject<List<Product>>(Convert.ToString((response.Result)));
        }
    }
    async Task ShowDetail(string id)
    {
        var product = GetListProducts.FirstOrDefault(x => x.Id == id);
        await DialogService.OpenAsync("Detail", ds =>
            @<div>
                List Services Include:
                @if (product.Products != null)
                {
                    @foreach (var item in product.Products)
                    {
                        <div>Name: @item.Name</div>
                    }  
                }
        </div>, new DialogOptions() {
            CssClass = "custom-dialog-class",
            WrapperCssClass = "custom-dialog-wrapper-class"
        });
    }
}
